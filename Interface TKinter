from tkinter import*
import re
#On place tout le code de Mila afin de la rendre contente et parce que quand même c'est beaucoup de boulot
#cryptage Cesar (linéaire x+b)
def cesar (texte,key) :
    crypted_text=list(texte)
    for loop in range (len(crypted_text)) :
      crypted_text[loop]=chr(ord(crypted_text[loop]) + key)
    texte="".join(crypted_text)
    return texte

#cryp affine (ax+b)
def affine (texte, key) :
    liste_key=list(key)
    premiers="".join(liste_key[:2])
    derniers="".join(liste_key[-2:])
    coeff=re.search("x$", premiers)
    coeff_bis=re.search("x$", derniers)
    crypted_text=list(texte)
    if (coeff) :
        coefficient=int(liste_key[0])
        ordonnee=int(liste_key[3])
    elif (coeff_bis) :
        coefficient=int(liste_key[2])
        ordonnee=int(liste_key[0])
    else :
        print("Veuillez réessayer : )   (en relançant le programme) ")
        print("N'oubliez pas que les chiffres doivent être compris entre 0 et 9")
    for loop in range (len(crypted_text)) :
      crypted_text[loop]=chr(ord(crypted_text[loop]) * coefficient + ordonnee)
    texte="".join(crypted_text)
    return texte

#cryp Vigenere
def vigenere (texte, key) :
    crypted_text=list(texte)
    key=list(key)
    a=0
    for loop in range (len(crypted_text)) :
        while a < len(key) :
            key[a]=ord(key[a])
            crypted_text[a]=chr(ord(crypted_text[a]) + key[a])
            a=a+1
        crypted_text[a]=chr(ord(crypted_text[a]) + key[a%len(key)])
        a=a+1
    texte="".join(crypted_text)
    return texte

#cryp Carré (sortie chiffres&nbs)
def carre (texte) :
    texte=texte.lower()
    lettres= list(re.findall("\w", texte))
    specials= list(re.findall("\W", texte))
    texte=list(texte)
    ordonnee=[0]*len(texte)
    abscisse=[0]*len(texte)
    crypted_text=""
    loop_ab=0
    loop_or=0
    for coco in range (len(texte)) :
        if lettres.count(texte[coco]) > 0 :
            lettres[loop_ab]=ord(lettres[loop_ab]) - 97
            ordonnee[loop_ab]=((lettres[loop_ab] % 5) +1)
            abscisse[loop_ab]=(lettres[loop_ab]//5)+1
            crypted_text=crypted_text+str(abscisse[loop_ab])
            crypted_text=crypted_text+str(ordonnee[loop_ab])
            loop_ab=loop_ab+1
        elif specials.count(texte[coco]) > 0 :
            abscisse[loop_or]=6
            specials[loop_or]=ord(specials[loop_or])
            if specials[loop_or]==32 :
                ordonnee[loop_or]=2
            elif specials[loop_or]==39 :
                ordonnee[loop_or]=5
            elif specials[loop_or]==44 :
                ordonnee[loop_or]=4
            elif specials[loop_or]==46 :
                ordonnee[loop_or]=3
            crypted_text=crypted_text+str(abscisse[loop_or])
            crypted_text=crypted_text+str(ordonnee[loop_or])
            loop_or=loop_or+1
    return crypted_text

#decryp Carré (entrée : chiffre)
def alphabet(décryptage) :
    crypted_texte=list(str(décryptage))
    texte=[0]*(len(crypted_texte)//2)
    rang=0
    for loop in range (len(crypted_texte)) :
        if loop%2==0 :
            indice_lettre=int(crypted_texte[loop])
        elif loop%2==1 :
            lettre=chr((5*(indice_lettre-1)+int(crypted_texte[loop]))+96)
            texte[rang]=lettre
            rang=rang+1
    phrase="".join(texte)
    return phrase

#on crée une fenêtre TKinter
fenetre = Tk()
#On crée un cadre pour délimiter la taille de la fenêtre
cadre = LabelFrame(fenetre, width = 1920, height = 1080, borderwidth = 1, text = "CryptoTool3000")
cadre.pack(fill=BOTH)

#On crée un label (une ligne de texte) que l'on pourra ensuite afficher dans la fenêtre TKinter
champ_label = Label(cadre, text = "Bienvenue dans la trousse à outil de cryptographie")

#On affiche le label dans la fenêtre
champ_label.pack(side ="top", fill = X)

#On crée une liste déroulante pour choisir une méthode d'encryptage
liste = Listbox(cadre)
liste.pack()
liste.insert(END, "Chiffre de Cesar")
liste.insert(END, "Fonction affine")
liste.insert(END, "Chiffre de Vigenere")
liste.insert(END, "Carré")

#On crée une zone de texte utilisable par l'utilisateur et un message lui indiquant quoi faire
instruction = Label(cadre, text = "Entrez le texte à encrypter, veuillez ne pas chercher à encrypter des nombres avec le chiffre de César")
instruction.pack()
user_texte = StringVar()
zone_texte = Entry(cadre, textvariable=user_texte, width=80)
zone_texte.pack()

#On retourne ici le choix de l'utilisateur
choix = liste.curselection()
#Selon la méthode choisie, on lance le programme approprié
if choix ==0 :
    instruction["text"] = "Entrez maintenant votre clé d'encryption pour le chiffre de César"
    instruction["text"]
    key = IntVar()
    Keylogger = Entry(cadre, textvariable=key, width=80)
    Keylogger.pack

    
    
#On démarre la boucle TKinter
fenetre.mainloop()
